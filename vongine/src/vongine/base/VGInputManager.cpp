#include "VGInputManager.h"
#include "base/VGCoreManager.h"

NS_VG_BEGIN

InputManager::InputManager()
: _mousePosX(0)
, _mousePosY(0)
{}

#define MAKE_PAIR_WITH_VALUE_ZERO(key) { key, 0 }

bool InputManager::Init()
{
	CoreManager::GetInstance().EventMgr()->onMouseMove.On(VG_MEMBER_CALLBACK_2(InputManager::OnMouseMove, this));

	// Populate keys state map with SDL_Keycode's as key and default state of "unpressed" as value.
	_keysState = {
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_UNKNOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RETURN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_ESCAPE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_BACKSPACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_TAB),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SPACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_EXCLAIM),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_QUOTEDBL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_HASH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PERCENT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_DOLLAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AMPERSAND),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_QUOTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LEFTPAREN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RIGHTPAREN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_ASTERISK),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PLUS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_COMMA),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MINUS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PERIOD),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SLASH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_0),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_1),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_2),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_3),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_4),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_5),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_6),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_7),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_8),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_9),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_COLON),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SEMICOLON),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LESS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_EQUALS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_GREATER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_QUESTION),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LEFTBRACKET),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_BACKSLASH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RIGHTBRACKET),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CARET),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_UNDERSCORE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_BACKQUOTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_a),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_b),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_c),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_d),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_e),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_f),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_g),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_h),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_i),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_j),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_k),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_l),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_m),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_n),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_o),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_p),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_q),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_r),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_s),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_t),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_u),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_v),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_w),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_x),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_y),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_z),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CAPSLOCK),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F1),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F2),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F3),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F4),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F5),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F6),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F7),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F8),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F9),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F10),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F11),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F12),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PRINTSCREEN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SCROLLLOCK),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PAUSE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_INSERT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_HOME),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PAGEUP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_DELETE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_END),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PAGEDOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RIGHT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LEFT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_DOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_UP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_NUMLOCKCLEAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_DIVIDE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MULTIPLY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MINUS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_PLUS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_ENTER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_1),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_2),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_3),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_4),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_5),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_6),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_7),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_8),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_9),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_0),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_PERIOD),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_APPLICATION),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_POWER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_EQUALS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F13),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F14),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F15),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F16),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F17),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F18),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F19),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F20),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F21),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F22),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F23),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_F24),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_EXECUTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_HELP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MENU),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SELECT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_STOP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AGAIN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_UNDO),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CUT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_COPY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PASTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_FIND),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MUTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_VOLUMEUP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_VOLUMEDOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_COMMA),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_EQUALSAS400),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_ALTERASE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SYSREQ),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CANCEL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CLEAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_PRIOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RETURN2),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SEPARATOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_OUT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_OPER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CLEARAGAIN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CRSEL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_EXSEL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_00),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_000),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_THOUSANDSSEPARATOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_DECIMALSEPARATOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CURRENCYUNIT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CURRENCYSUBUNIT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_LEFTPAREN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_RIGHTPAREN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_LEFTBRACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_RIGHTBRACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_TAB),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_BACKSPACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_A),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_B),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_C),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_D),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_E),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_F),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_XOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_POWER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_PERCENT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_LESS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_GREATER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_AMPERSAND),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_DBLAMPERSAND),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_VERTICALBAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_DBLVERTICALBAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_COLON),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_HASH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_SPACE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_AT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_EXCLAM),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMSTORE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMRECALL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMCLEAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMADD),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMSUBTRACT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMMULTIPLY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_MEMDIVIDE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_PLUSMINUS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_CLEAR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_CLEARENTRY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_BINARY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_OCTAL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_DECIMAL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KP_HEXADECIMAL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LCTRL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LSHIFT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LALT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_LGUI),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RCTRL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RSHIFT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RALT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_RGUI),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MODE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIONEXT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOPREV),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOSTOP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOPLAY),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOMUTE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MEDIASELECT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_WWW),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_MAIL),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_CALCULATOR),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_COMPUTER),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_SEARCH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_HOME),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_BACK),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_FORWARD),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_STOP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_REFRESH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AC_BOOKMARKS),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_BRIGHTNESSDOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_BRIGHTNESSUP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_DISPLAYSWITCH),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KBDILLUMTOGGLE),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KBDILLUMDOWN),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_KBDILLUMUP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_EJECT),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_SLEEP),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_APP1),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_APP2),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOREWIND),
		MAKE_PAIR_WITH_VALUE_ZERO(SDLK_AUDIOFASTFORWARD)
	};

	return true;
}

void InputManager::OnInputEvent(const InputEvent& ev)
{
	// Add to array of input events triggered during current frame
	_frameEvents.push_back(ev);
	// Update key state
	switch (ev.device)
	{
	case InputDevice::KEYBOARD:
	{
		switch (ev.type)
		{
		case InputType::DOWN:
		{
			// Set to "pressed"
			_keysState[ev.keys[0]] = VGKS_PRESSED;
			break;
		}
		case InputType::UP:
		{
			// Set to "unpressed"
			_keysState[ev.keys[0]] = VGKS_UNPRESSED;
			break;
		}
		}
		break;
	}
	}
}

void InputManager::AddAction(const std::string& name, const InputEvent& ev)
{
	_userActions[name] = ev;
}

bool InputManager::TestAction(const std::string& name) const
{
	InputEvent actionEvent = _userActions.at(name);
	for (uint32 i = 0; i < _frameEvents.size(); i++)
	{
		if (_frameEvents[i] == actionEvent)
			return true;
	}

	return false;
}

void InputManager::GetMousePos(int32* const mousex, int32* const mousey) const
{
	*mousex = _mousePosX;
	*mousey = _mousePosY;
}

bool InputManager::IsMouseButtonPressed(const uint32 buttonId)
{
	if (utils::one_of(buttonId, 0, 1, 2))
	{ 
		// Convert 'buttonId' to valid SDL value
		int32 sdlButtonId;
		if (buttonId == 0)
		{
			sdlButtonId = SDL_BUTTON(SDL_BUTTON_LEFT);
		}
		else if (buttonId == 1)
		{
			sdlButtonId = SDL_BUTTON(SDL_BUTTON_MIDDLE);
		}
		else
		{
			sdlButtonId = SDL_BUTTON(SDL_BUTTON_RIGHT);
		}
		// Test state
		return (SDL_GetMouseState(nullptr, nullptr) & sdlButtonId);
	}
	return false;
}

void InputManager::ClearFrameEvents()
{
	_frameEvents.clear();
}

void InputManager::OnMouseMove(const int32 mousex, const int32 mousey)
{
	_mousePosX = mousex;
	_mousePosY = mousey;
}

NS_VG_END
